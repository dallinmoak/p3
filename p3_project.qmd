---
title: "Client Report - Late Flights & Missing Data (JSON)"
subtitle: "Course DS 250"
author: "Dallin Moak"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

## Source code
__source code available at [p3_source.py](/p3_source.py)__

```{python}
import os
from p3_source import df_raw

_ = os.getcwd()
df_raw
```

## Elevator pitch
_The dataset from from BTS represents data about flight delays over a decade from seven airports. The data indicates that the san Francisco airport has the most delays of any length, but that fact obscures the fact that there is a large variability in the length of the delays. If an airport has 100% of its flights delayed for just 1 minute, that wouldn't really be a big deal. The most important metric probably represent delayed flights measured as a count against on-time flights, but moderated by the amount of time the thing was delayed. Further research is indicated. This anylist will request a grant for more study of this dataset._

## QUESTION|TASK 1

__Fix all of the varied missing data types in the data to be consistent (all missing values should be displayed as “NaN”).__ 
__In your report include one record example (one row) from your new data, in the raw JSON format. Your example should display the "NaN" for at least one missing value.__  

_So I went through the dataset and made sure every instance (row) had all properties (column) and that if the value isn't present it was set to pandas.NA. After that, I checked to see if any of the properties that ought to be ints are failing integer casting, and attempted to fix them by casting that value as a string, removing all non-numeric characters from the value and casting it back to an int. I then handle all instances of empty strings by setting them to pandas.NA and then cast every column to its proper type. I also removed all instances(rows) that didn't have a clear month, assuming that rows that don't give a discernable month are useless and a potential skew of the data. Then i fixed a misspelling of february i found. If this was a real project, I'd create a supplamentary table to map airport codes to airport names, but that wasn't part of the assignment_

```{python}
from p3_source import q1_example, df
from pandas import NA, isna

q1_example.head().style.format(na_rep="NaN")
```


## QUESTION|TASK 2

__Which airport has the worst delays?__ Describe the metric you chose, and why you chose it to determine the “worst” airport. Your answer should include a summary table that lists (for each airport) the total number of flights, total number of delayed flights, proportion of delayed flights, and average delay time in hours.   

_pandas dataframe styler is giving me trouble, but here's the data that indicates that SFO airport leads in both average time of delay per flight through all months and percent of flights that have a delay_

```{python}
# Include and execute your code here
from p3_source import q2_data


def hours_format(x):
    if pd.isna(x):
        return ""
    h = int(x)
    m = int(round((x - h) * 60))
    return f"{h}h {m}m" if m else f"{h}h"


def percent_format(x):
    return f"{x*100:.1f}%" if pd.notna(x) else ""


q2_data.style.format(
    {"delay_percent": percent_format, "avg_delay_per_flight_hours": hours_format}
)

q2_data
```


## QUESTION|TASK 3

__What is the best month to fly if you want to avoid delays of any length?__ Describe the metric you chose and why you chose it to calculate your answer. Include one chart to help support your answer, with the x-axis ordered by month. (To answer this question, you will need to remove any rows that are missing the `Month` variable.)  

_I've already excluded rows that didn't provide month data, so all records represent an individual month/airport combo. Since the question specified delays of any length, delay time will not be considered. based on sums of delayed flights from all airports for each month combined with sums of total flights, it seems clear that september at 16.5% missed flights and december at 16.7% missed flights._

```{python}
from p3_source import q3_data, q3_chart

q3_data
```
```{python}
q3_chart
```



## QUESTION|TASK 4

According to the BTS website, the “Weather” category only accounts for severe weather delays. Mild weather delays are not counted in the “Weather” category, but are actually included in both the “NAS” and “Late-Arriving Aircraft” categories. __Your job is to create a new column that calculates the total number of flights delayed by weather (both severe and mild).__ You will need to replace all the missing values in the Late Aircraft variable with the mean. Show your work by printing the first 5 rows of data in a table. Use these three rules for your calculations:  

    a. 100% of delayed flights in the Weather category are due to weather  
    b. 30% of all delayed flights in the Late-Arriving category are due to weather  
    c. From April to August, 40% of delayed flights in the NAS category are due to weather. The rest of the months, the proportion rises to 65%    

_I created a map (`average_weather_rates`) based on the rules above that gives the average percent of late_aircraft or nas delays by month, and then created a dataframe that puts the late_aircraft multipled by the percent for the row's month in a late aircraft weather column, and the same for nas delays. I also added columns that sums late aircraft weather delays and nas weather delays, and one that sums that sum and the actual weather delays to get total mild and severe weather delays._

_The values for the mild weather delays are by nesessity not integers, because they're based on extrapolation from the monthly weather delay proportions from the rules._

_Assuming the rates in the rules come from averages based on data that is representative of the flight data in the dataset, then my data faithfully extrapolates (approximate) values based on those average rates. I'm leaving them as floating-point values instead of rounding to integers so as to not obfuscate information._

```{python}
from p3_source import q4_data

q4_data
```

## QUESTION|TASK 5

__Using the new weather variable calculated above, create a barplot showing the proportion of all flights that are delayed by weather at each airport. Describe what you learn from this graph.__  

_I agregated the weather breakdown data from q4 by airport, and then melted it so that there was a row for each airport/weather category combo (ATL Mild, ALT Severe, DEN Mild, DEN Severe, ect). then I stacked 'em so you could see them as sums. this view allowed me to see both the relative rates for each category of weather delay, but also the proportion of mild to severe weather delays. it looks like there were about 1 severe weather delays for every 10 mild weather delays. The two highest weather delays, san francisco and chicago make sense to me; the fog in SF is famous and chicago's got all that cold wind off lake michigan_
```{python}
from p3_source import q5_data_melted, q5_chart

q5_data_melted
```
```{python}
q5_chart
```

---


## STRETCH QUESTION|TASK 1

__Which delay is the worst delay?__ Create a similar analysis as above for Weahter Delay with: Carrier Delay and Security Delay. Compare the proportion of delay for each of the three categories in a Chart and a Table. Describe your results.

_type your results and analysis here_

```{python}
# Include and execute your code here


```

---

